# Version 0.1 Last updated 06/2016
#
# Installs ESXi and sets the IP & Hostname based on the MAC address
# 
# For info on how to build the boot CD, see http://www.virtuallyghetto.com/2012/03/how-to-create-bootable-esxi-5-iso.html

accepteula
install --firstdisk --overwritevmfs
rootpw VMware1!
# network --bootproto=dhcp --device=vmnic0
reboot

%pre --interpreter=busybox 

%firstboot --interpreter=busybox 

# Constants
BUILDVERSION="VMware vSphere 5.5 build v1.0";
DOWNLOADURL="http://192.168.0.100";
CONFIGURL="${DOWNLOADURL}/ks/esxi55"
WAITFORHOSTD=120;
WAITFORREMOVAL=15;
DELIMITER1="---";

########################################################################################################################
# Firstboot set to sleep 2 mins to allow the host daemon to fully start. This is an issue on certail blade server models.
# sleep ${WAITFORHOSTD};

# Create a build working folder and initial build logging. 
# To prevent any persistency issues the scratch partition is used.
strScratchfolder=`cat /etc/vmware/locker.conf | cut -d" " -f1`;
mkdir ${strScratchfolder}/build;
strBuildfolder="${strScratchfolder}/build";
strLogfile="${strBuildfolder}/build.log";

# Change to the build working folder, all build actions now done from here
cd ${strBuildfolder};
echo "INFO  Build folder: ${strBuildfolder}." >> ${strLogfile};

# Parse kickstart URL and determine host name
strFQDN=`awk 'FNR==2 {print $7}' /var/log/esxi_install.log | cut -d"=" -f3`;
strHostname=`echo ${strFQDN} | cut -d"." -f1`;

# Parse all hardware information and log. This information can be used for customised configuration if required.
strManufacturer=`esxcli hardware platform get | grep Vendor\ Name | cut -d":" -f2 | sed -e 's/^\ //'`;
strModel=`esxcli hardware platform get | grep Product\ Name | cut -d":" -f2 | sed -e 's/^\ //'`;
strSerial=`esxcli hardware platform get | grep Serial\ Number | cut -d":" -f2 | sed -e 's/^\ //'`;
strUUID=`smbiosDump | grep -A 5 System\ Info | grep UUID | cut -d":" -f2 | sed -e 's/[ ]*//'`; 
echo "INFO  System manufacturer/model: ${strManufacturer} ${strModel}" >> ${strLogfile};
echo "INFO  System serial: ${strSerial}" >> ${strLogfile};
echo "INFO  System UUID (from BIOS): ${strUUID}" >> ${strLogfile};

########################################################################################################################
# Basic config
# Set system hostname
echo "INFO  Configuring hostname: ${strFQDN}" >> ${strLogfile};
#esxcli system hostname set --fqdn=${strFQDN};
esxcli system hostname set --fqdn=TESTING

# Rename local datastore to be more descriptive.
# Datastore name is persistent across ALL rebuilds hence find old name first then rename it.
strCurrentdsname=`esxcli --formatter=csv storage filesystem list | grep VMFS | cut -d"," -f7`;
vim-cmd hostsvc/datastore/rename ${strCurrentdsname} "${strHostname}_localds1";
echo "INFO  Local datastore renamed to ${strHostname}_localds1." >> ${strLogfile};

# Determine ESXi version
strESXiversion=`vmware -v`;
strESXinoversion=`vmware -v | cut -d" " -f3`;
echo "INFO  VMware ESXi version installed: ${strESXiversion}" >> ${strLogfile};

####################################
# Setup Networking based on MAC Address

# Get MAC Address
MACADDR=$(esxcli network ip interface list |grep MAC | awk '{print $3}')

# Find IP matching MAC Address
case `echo "${MACADDR}"` in
"00:0c:29:c2:25:8d"*)
	HOSTNAME="SiteA"
	IPADDR="192.168.10.240"
	;;
"00:0c:29:58:5d:d7"*)
	HOSTNAME="SiteB"
	IPADDR="192.168.10.250"
	;;
*)
	HOSTNAME="DHCP"
	;;
esac

# Set IP if MAC is listed above. Otherwise use DHCP
if [`echo "${HOSTNAME}"` == "DHCP" ]; then
	esxcli network ip interface ipv4 set --interface-name=vmk0 --type=dhcp
else
	esxcli network ip interface ipv4 set --interface-name=vmk0 --ipv4=${IPADDR} --netmask=255.255.255.0 --type=static
fi

# Set hostname
esxcli system hostname set --fqdn=${HOSTNAME}


 
# Enable SSH and the ESXi Shell
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell
